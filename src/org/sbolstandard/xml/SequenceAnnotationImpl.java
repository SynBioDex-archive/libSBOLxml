//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.09.12 at 11:06:26 AM PDT 
//


package org.sbolstandard.xml;

import java.net.URI;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;
import javax.xml.namespace.QName;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlID;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;

import org.sbolstandard.core.*;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SequenceAnnotationImpl", propOrder = { "precede" })
public class SequenceAnnotationImpl implements SequenceAnnotation {

    protected List<PrecedeReference> precede = new ArrayList<PrecedeReference>();

    @XmlAttribute(required = true)
    protected URI uri = null;
    @XmlAttribute(required = true)
    protected int bioStart = 1;
    @XmlAttribute(required = true)
    protected int bioEnd = 1;
    @XmlAttribute(required = true)
    protected String strand = null;
	@XmlAttribute
	protected String subComponentURI = null;

	@XmlTransient
	private DnaComponentImpl subComponent = null;
	
    public SequenceAnnotationImpl(){ this(null); }

    public SequenceAnnotationImpl(URI uri){  this.uri = uri; }

    public URI getURI(){ return this.uri; }
    public void setURI(URI uri){ this.uri = uri; }

    public void addPrecede(SequenceAnnotation annotation) {
        this.precede.add(new PrecedeReference((SequenceAnnotationImpl)annotation));
    }
    public java.util.Collection<SequenceAnnotation> getPrecedes(){
        ArrayList<SequenceAnnotation> result = new ArrayList<SequenceAnnotation>();
        for(int i=0; i < precede.size(); i++) result.add(precede.get(i).getSequenceAnnotation());
        return result;
    }
    public void removePrecede(SequenceAnnotation annotation){
        int index = this.precede.indexOf((SequenceAnnotationImpl)annotation);
        if(index == -1) return;
        this.precede.remove(index);
    }
    
    public DnaComponent getSubComponent(){ return this.subComponent; }
	public void setSubComponent(DnaComponent subComponent) {
		this.subComponent = (DnaComponentImpl)subComponent;
		this.subComponentURI = this.subComponent.getURI().toString();
	}

    public int getBioStart() { return bioStart; }
    public void setBioStart(int value) { this.bioStart = value; }

    public int getBioEnd() { return bioEnd; }
    public void setBioEnd(int value) { this.bioEnd = value; }

    public String getStrand() { return strand; }
    public void setStrand(String value) { this.strand = value; }

    // Below here are methods used only by the XML engine
	public String getSubComponentURI(){ return this.subComponentURI; }
	public void setSubComponentURI(String uri) { this.subComponentURI = uri; }

    public List<PrecedeReference> getPrecede() { return this.precede; }
    
    public void cleanupPostParse(CollectionImpl collection, DnaComponentImpl component){
        Iterator<PrecedeReference> iter = getPrecede().iterator();
        while(iter.hasNext()){
            PrecedeReference ref = iter.next();
            if(ref.getSequenceAnnotation() == null){
                SequenceAnnotationImpl sa = component.getSequenceAnnotation(ref.getURI());
                if(sa == null){
                    System.err.println("Could not find referenced sequence annotation: " + ref.getURI());
                } else {
                    ref.setSequenceAnnotation(sa);
                }
            }
        }

		if(this.subComponentURI != null && this.subComponentURI.length() > 0){
			this.subComponent = collection.findDnaComponent(UtilURI.Create(this.subComponentURI));
		}
    }

}
